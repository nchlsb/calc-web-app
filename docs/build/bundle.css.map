{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\App.svelte",
    "..\\..\\TooltipFromAction.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">;\r\nimport { range, slope, twoPointForm, visitStrategy, sumBy } from \"./helpers\";\r\nimport * as katex from \"katex\";\r\nimport { onMount } from 'svelte/internal';\r\nimport { tooltip } from './tooltip';\r\n// ********************* graph *********************\r\nconst DEFAULT_BOUND_MAGNITUDE = Math.ceil(Math.PI);\r\nconst GRAPH_AXIS_MARK_LENGTH = 0.08;\r\nconst xMaxBound = DEFAULT_BOUND_MAGNITUDE;\r\nconst xMinBound = -DEFAULT_BOUND_MAGNITUDE;\r\nconst yMaxBound = DEFAULT_BOUND_MAGNITUDE;\r\nconst yMinBound = -DEFAULT_BOUND_MAGNITUDE;\r\n// ********************* function *********************\r\nlet f;\r\n$: f = functions[selectedFunctionIndex].implementation;\r\nlet numberOfPoints = 100;\r\nlet points;\r\n$: points = [...range(numberOfPoints).map(n => {\r\n        const x = xMinBound + (n * ((xMaxBound - xMinBound) / numberOfPoints));\r\n        return { x: x, y: f(x) };\r\n    }), { x: xMaxBound, y: f(xMaxBound) }];\r\n// ********************* derivatives *********************\r\nconst DELTA_X_APPROACHES_0 = 0.00001;\r\nlet deltaX = 1;\r\nlet secantPoint1;\r\n$: secantPoint1 = { x: x, y: f(x) };\r\nlet secantPoint2;\r\n$: secantPoint2 = (deltaX !== 0) ? { x: x + deltaX, y: f(x + deltaX) } : tangentPoint2;\r\n// let secantSlopeTextDisplayPoint: Point\r\n// $: secantSlopeTextDisplayPoint = {x: x + deltaX + 0.5, y: f(x + deltaX) + 0.5}\r\nlet secant;\r\n$: secant = twoPointForm(secantPoint1, secantPoint2);\r\nlet displayedSecantLine;\r\n$: displayedSecantLine = {\r\n    x1: xMinBound, y1: secant(xMinBound),\r\n    x2: xMaxBound, y2: secant(xMaxBound)\r\n};\r\nlet tangentPoint1;\r\n$: tangentPoint1 = { x: x, y: f(x) };\r\nlet tangentPoint2;\r\n$: tangentPoint2 = { x: x + DELTA_X_APPROACHES_0, y: f(x + DELTA_X_APPROACHES_0) };\r\nlet tangent;\r\n$: tangent = twoPointForm(tangentPoint1, tangentPoint2);\r\nlet slopeTangent;\r\n$: slopeTangent = slope(tangentPoint1, tangentPoint2);\r\nlet slopeSecant;\r\n$: slopeSecant = (deltaX !== 0) ? slope(secantPoint1, secantPoint2) : slopeTangent;\r\nlet displayedTangentLine;\r\n$: displayedTangentLine = {\r\n    x1: xMinBound, y1: tangent(xMinBound),\r\n    x2: xMaxBound, y2: tangent(xMaxBound)\r\n};\r\n// ********************* integrals *********************\r\nlet rectangleStrategy;\r\n$: rectangleStrategy = 'Left';\r\nlet sliderRectangleWidth = 2;\r\nlet rectangleWidth;\r\n$: rectangleWidth = sliderRectangleWidth; //Math.exp(sliderRectangleWidth) - 1;\r\nlet integralBound1 = -DEFAULT_BOUND_MAGNITUDE;\r\nlet integralBound2 = DEFAULT_BOUND_MAGNITUDE;\r\nlet integralLowerBound;\r\n$: integralLowerBound = Math.min(integralBound1, integralBound2);\r\nlet integralUpperBound;\r\n$: integralUpperBound = Math.max(integralBound1, integralBound2);\r\nlet numberRectangles;\r\n$: numberRectangles = (integralUpperBound - integralLowerBound) / rectangleWidth;\r\nlet riemannRectangles;\r\n$: riemannRectangles = range(numberRectangles).map(n => {\r\n    const x = integralLowerBound + (n * (integralUpperBound - integralLowerBound) / numberRectangles);\r\n    const y = f(x + visitStrategy(rectangleStrategy, {\r\n        whenLeft: 0,\r\n        whenMidpoint: (rectangleWidth / 2),\r\n        whenRight: rectangleWidth\r\n    }));\r\n    // SVG can't process negative height \r\n    return {\r\n        height: Math.abs(y),\r\n        width: rectangleWidth,\r\n        lowerLeftCorner: { x: x, y: (y > 0) ? 0 : y }\r\n    };\r\n});\r\nlet actualSum;\r\n$: actualSum = (() => {\r\n    let sum = 0;\r\n    for (let n = 0; n < ((integralUpperBound - integralLowerBound) / DELTA_X_APPROACHES_0); n++) {\r\n        const x = integralLowerBound + (n * (integralUpperBound - integralLowerBound) / ((integralUpperBound - integralLowerBound) / DELTA_X_APPROACHES_0));\r\n        sum += Math.abs(f(x));\r\n    }\r\n    return sum;\r\n})();\r\n// ********************* controls *********************\r\nlet context;\r\n$: context = \"Derivative\";\r\nlet selectedFunctionIndex = 0;\r\nconst functions = [\r\n    { id: 'sine', implementation: (x) => Math.sin(x), representation: 'f(x) = \\\\sin(x)' },\r\n    { id: 'const', implementation: (x) => 1, representation: 'f(x) = 1' },\r\n    { id: 'linear', implementation: (x) => x, representation: 'f(x) = x' },\r\n    { id: 'quadratic', implementation: (x) => x * x, representation: 'f(x) = x^2' },\r\n    { id: 'exponential', implementation: (x) => Math.exp(x), representation: 'f(x) = e^x' },\r\n    { id: 'cubic', implementation: (x) => (x - 1) * (x) * (x + 1), representation: 'f(x) = (x - 1)(x)(x + 1)' },\r\n];\r\nlet x = 0;\r\n// ********************* equation rendering *********************\r\nonMount(() => {\r\n    // functions at the top\r\n    for (let f of functions) {\r\n        katex.render(f.representation, document.getElementById(`${f.id}`), { output: 'html' });\r\n    }\r\n    renderEquation();\r\n});\r\nfunction renderEquation() {\r\n    // katex.render(`x = ${x}`, document.getElementById('xEquals'))\r\n    // katex.render(`\\\\Delta x = ${deltaX}`, document.getElementById('deltaXEquals'))\r\n    // katex.render('m = \\\\lim_{\\\\Delta x \\\\rightarrow 0} \\\\frac{f(x + \\\\Delta x) - f(x)}{\\\\Delta x}',\r\n    // \tdocument.getElementById('differenceEquation1'), {output: 'html'})\r\n    // katex.render(`m = \\\\frac{f(x + ${g(deltaX)}) - f(x)}{${g(deltaX)}}`,\r\n    // \tdocument.getElementById('differenceEquation2'), {output: 'html'})\r\n    // katex.render(`m = \\\\frac{f(${g(x)} + ${g(deltaX)}) - f(${g(x)})}{${g(deltaX)}}`,\r\n    // \tdocument.getElementById('differenceEquation3'), {output: 'html'})\r\n    // katex.render(`m = \\\\frac{f(${g(x + deltaX)}) - f(${g(x)})}{${g(deltaX)}}`,\r\n    // \tdocument.getElementById('differenceEquation4'), {output: 'html'})\r\n    // katex.render(`m = ${g(f(x + deltaX) - f(x) / deltaX)}`,\r\n    // \tdocument.getElementById('differenceEquation5'), {output: 'html'})\r\n}\r\nfunction g(n) {\r\n    return n.toFixed(2);\r\n}\r\n</script>\r\n<div class=\"outer\">\r\n<div class=\"container\">\r\n\t<p>\r\n\t\t<button use:tooltip data-title=\"How quickly does a curve change?\"  class={context === 'Derivative' ? 'highlighted' : ''}  on:click={_ => context = 'Derivative'}>Derivatives</button>\r\n\t\t<button use:tooltip data-title=\"What is the area under a curve?\" class={context === 'Integral' ? 'highlighted' : ''}  on:click={_ => context = 'Integral'}>Integral</button>\r\n\t</p>\r\n\r\n\t{#each functions as f, functionIndex}\r\n\t\t<button class={functionIndex === selectedFunctionIndex ? 'highlighted' : ''} on:click={_ => selectedFunctionIndex = functionIndex}><span id={f.id}>{f.representation}</span></button>\r\n\t{/each}\r\n\t\r\n\r\n\t<!-- derivatives -->\r\n\t<svg class=\"cartesian\" viewBox=\"{xMinBound} {yMinBound} {(xMaxBound - xMinBound)} {(yMaxBound - yMinBound)}\">\r\n\t\t<g>\r\n\t\t\t{#if context === 'Derivative'}\r\n\t\t\t\t\r\n\t\t\t\t<line stroke=\"red\" stroke-dasharray=\"4,4\" fill=\"none\"\r\n\t\t\t\t\tx1={displayedSecantLine.x1} y1={displayedSecantLine.y1}\r\n\t\t\t\t\tx2={displayedSecantLine.x2} y2={displayedSecantLine.y2}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<line stroke=\"grey\" stroke-dasharray=\"4,4\" fill=\"none\"\r\n\t\t\t\t\tx1={displayedTangentLine.x1} y1={displayedTangentLine.y1}\r\n\t\t\t\t\tx2={displayedTangentLine.x2} y2={displayedTangentLine.y2}\r\n\t\t\t\t\tvisibility={(deltaX !== 0) ? \"visible\" : \"hidden\"}\r\n\t\t\t\t/>\r\n\r\n\t\t\t\t<circle use:tooltip data-title={`(${x.toFixed(2)}, ${f(x).toFixed(2)})`} cx={x} cy={f(x)} r=\".075\" fill=\"red\"></circle>\r\n\t\t\t\t<circle use:tooltip data-title={`(${(x + deltaX).toFixed(2)}, ${f(x + deltaX).toFixed(2)})`} cx={x + deltaX} cy={f(x + deltaX)} r=\".075\" fill=\"red\"></circle>\r\n\t\t\r\n\t\t\t\t<!-- why does the y value need to be negative?-->\r\n\t\t\t\t<!-- <text x={x + deltaX + 0.5} y={-secant(x + deltaX)} font-size=\".4\">m={slope(secantPoint1, secantPoint2).toFixed(2)}</text> -->\r\n\t\t\t{:else}\r\n\t\t\t\t<!-- bounds of intergral -->\r\n\t\t\t\t<line stroke=\"black\" stroke-dasharray=\"2,2\" fill=\"none\" x1={integralLowerBound} y1={yMinBound} x2={integralLowerBound} y2={yMaxBound} />\r\n\t\t\t\t<line stroke=\"black\" stroke-dasharray=\"2,2\" fill=\"none\" x1={integralUpperBound} y1={yMinBound} x2={integralUpperBound} y2={yMaxBound} />\r\n\t\t\t\t{#each riemannRectangles as rectangle}\r\n\t\t\t\t\t<rect\r\n\t\t\t\t\t\tclass=\"riemann-rectangle\"\r\n\t\t\t\t\t\tx={rectangle.lowerLeftCorner.x}\r\n\t\t\t\t\t\ty={rectangle.lowerLeftCorner.y}\r\n\t\t\t\t\t\twidth={rectangle.width}\r\n\t\t\t\t\t\theight={rectangle.height}\r\n\t\t\t\t\t/>\r\n\t\t\t{/each}\r\n\t\t\t\r\n\t\t\t{/if}\r\n\t\t\t<!-- x and y axis -->\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={xMinBound} y1=\"0\" x2={xMaxBound} y2=\"0\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"1\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"1\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"2\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"2\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"3\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"3\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"4\"  y1={GRAPH_AXIS_MARK_LENGTH} x2=\"4\"  y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-1\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-1\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-2\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-2\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-3\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-3\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"-4\" y1={GRAPH_AXIS_MARK_LENGTH} x2=\"-4\" y2={-GRAPH_AXIS_MARK_LENGTH} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1=\"0\" y1={yMinBound} x2=\"0\" y2={yMaxBound} />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"1\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"1\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"2\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"2\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"3\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"3\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"4\"  x2={GRAPH_AXIS_MARK_LENGTH} y2=\"4\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-1\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-1\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-2\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-2\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-3\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-3\" />\r\n\t\t\t<line stroke=\"black\" fill=\"none\" x1={-GRAPH_AXIS_MARK_LENGTH} y1=\"-4\" x2={GRAPH_AXIS_MARK_LENGTH} y2=\"-4\" />\r\n\t\t\t<!-- graph of function -->\r\n\t\t\t<polyline stroke=\"black\" fill=\"none\" points={points.map(point => `${point.x},${point.y}`).join(' ')} />\r\n\t\t</g>\r\n\t</svg>\r\n\r\n\r\n\t<p id = \"SecantVsTangent\">\r\n\t\t{#if context === 'Derivative'}\r\n\t\t<span id=\"SlopeOfSecant\" use:tooltip data-title=\"Slope of the line at the x value if you made the two points infinitely close together\">\r\n\t\t\tSlope of tagent {slopeSecant.toFixed(2)}\r\n\t\t</span>\r\n\t\t\t| \r\n\t\t<span use:tooltip data-title=\"Slope of the line between the points you control\">\r\n\t\t\tSlope of secant: {slopeTangent.toFixed(2)}\r\n\t\t</span> \r\n\t\t{:else}\r\n\t\t\tArea of rectangles: {sumBy(riemannRectangles, rectangle => rectangle.width * rectangle.height).toFixed(2)} \r\n\t\t\t| Area under curve: {(DELTA_X_APPROACHES_0 * actualSum).toFixed(2)}\r\n\t\t{/if}\r\n\t</p>\r\n\r\n\t{#if context === 'Derivative'}\r\n\t\r\n\r\n\t<label use:tooltip data-title=\"the distance between your input and the second point\" for=\"deltaX\" >Δx: {deltaX.toFixed(2).replace('-0.00', '0.00')}</label>\r\n\t<input id=\"deltaX\" type=\"range\" min=\"-1\" step=\"0.01\" max=\"1\"  bind:value={deltaX} on:input={renderEquation}>\r\n\t\r\n\t<label use:tooltip data-title=\"the number you input into the function you chose\" for=\"deltaX\">x: {x.toFixed(2).replace('-0.00', '0.00')}</label>\r\n\t<input id=\"x\" type=\"range\" step=\"0.01\" min={xMinBound} max={xMaxBound} bind:value={x} on:input={renderEquation}>\r\n\r\n\t{:else}\r\n\r\n\r\n\t<label for=\"RectangleWidthValue\">Rectangle Width: {rectangleWidth}</label>\r\n\t<input id=\"RectangleWidthValue\" type=\"range\" min=\"0.01\" step=\"0.01\" max={Math.log(xMaxBound - xMinBound).toFixed(2)}  bind:value={rectangleWidth}>\r\n\r\n\t<label for=\"range1\">interval bound 1: {integralBound1}</label>\r\n\t<input class=\"bound-range1\" type=\"range\" min={xMinBound} max={xMaxBound} step=\".01\" bind:value={integralBound1}>\r\n\t<label for=\"bound-range2\">interval bound 2: {integralBound2}</label>\r\n\t<input class=\"bound-range2\" type=\"range\" min={xMinBound} max={xMaxBound} step=\".01\" bind:value={integralBound2}>\r\n\t\r\n\t<button class={rectangleStrategy === 'Left' ? 'highlighted' : ''}  on:click={_ => rectangleStrategy = 'Left'}>Left</button>\r\n\t<button class={rectangleStrategy === 'Midpoint' ? 'highlighted' : ''}  on:click={_ => rectangleStrategy = 'Midpoint'}>Midpoint</button>\r\n\t<button class={rectangleStrategy === 'Right' ? 'highlighted' : ''}  on:click={_ => rectangleStrategy = 'Right'}>Right</button>\r\n\t\r\n\t{/if}\r\n\t<!-- <p id=\"differenceEquation1\"></p>\r\n\t<p id=\"differenceEquation2\"></p>\r\n\t<p id=\"differenceEquation3\"></p>\r\n\t<p id=\"differenceEquation4\"></p>\r\n\t<p id=\"differenceEquation5\"></p>\r\n\t<p id=\"xEquals\"></p>\r\n\t<p id=\"deltaXEquals\"></p> -->\r\n\t\r\n</div>\r\n</div>\r\n<link rel=\"stylesheet\" href=\"https://cdn.jsdelivr.net/npm/katex@0.12.0/dist/katex.min.css\" integrity=\"sha384-AfEj0r4/OFrOo5t7NnNe46zW/tFgW6x/bCJG8FqQCEo3+Aro6EYUG4+cU+KJWu/X\" crossorigin=\"anonymous\">\r\n<style>\r\n\t.outer {\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t.riemann-rectangle {\r\n\t\tfill: gray;\r\n\t\tstroke: gray;\r\n\t\tstroke-width: 1;\r\n\t}\r\n\r\n\tline, rect, polyline {\r\n\t\tstroke-width: 1px;\r\n\t\tvector-effect: non-scaling-stroke;\r\n\t}\r\n\r\n\t@media (min-width: 640px) {\r\n\t\tmain {\r\n\t\t\tmax-width: none;\r\n\t\t}\r\n\t}\r\n\r\n\tinput[type=\"range\"], svg.cartesian {\r\n\t\twidth: min(65vh, 100%);\r\n\t\tdisplay: block;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\t.container {\r\n\t\twidth: min(70vh, 100%);\r\n\t\tdisplay: block;\r\n\t\tmargin: 0 auto;\r\n\t}\r\n\r\n\t/* Flip the vertical axis in <g> to emulate cartesian. */\r\n\tsvg.cartesian > g {\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n\r\n\t/* Re-flip all <text> element descendants to their original side up. */\r\n\tsvg.cartesian > g text {\r\n\t\ttransform: scaleY(-1);\r\n\t}\r\n\r\n\t.highlighted {\r\n\t\tbackground-color: limegreen;\r\n\t}\r\n\r\n\tlabel {\r\n\t\twidth: max-content;\r\n\t\tfont-size: 20px;\r\n\t}\r\n\r\n\t#SecantVsTangent {\r\n\t\tfont-size: 30px;\r\n\t}\r\n\r\n\t#SlopeOfSecant {\r\n\t\tcolor: red\r\n\t}\r\n\r\n</style>",
    "<script>\r\n\texport let title;\r\n\texport let x;\r\n\texport let y;\r\n</script>\r\n<div style=\"\r\n\t\ttop: {y + 5}px;\r\n\t\tleft: {x + 5}px;\">{title}</div>\r\n\r\n<style>\r\n\tdiv {\r\n\t\tborder: 1px solid #ddd;\r\n\t\tbox-shadow: 1px 1px 1px #ddd;\r\n\t\tbackground: white;\r\n\t\tborder-radius: 4px;\r\n\t\tpadding: 4px;\r\n\t\tposition: absolute;\r\n\t}\r\n</style>\r\n"
  ],
  "names": [],
  "mappings": "AA8PC,MAAM,8BAAC,CAAC,AACP,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,kBAAkB,8BAAC,CAAC,AACnB,IAAI,CAAE,IAAI,CACV,MAAM,CAAE,IAAI,CACZ,YAAY,CAAE,CAAC,AAChB,CAAC,AAED,kCAAI,CAAE,kCAAI,CAAE,QAAQ,8BAAC,CAAC,AACrB,YAAY,CAAE,GAAG,CACjB,aAAa,CAAE,kBAAkB,AAClC,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AAI3B,CAAC,AAED,KAAK,CAAC,IAAI,CAAC,OAAO,+BAAC,CAAE,GAAG,UAAU,8BAAC,CAAC,AACnC,KAAK,CAAE,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CACtB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAED,UAAU,8BAAC,CAAC,AACX,KAAK,CAAE,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,CACtB,OAAO,CAAE,KAAK,CACd,MAAM,CAAE,CAAC,CAAC,IAAI,AACf,CAAC,AAGD,GAAG,yBAAU,CAAG,CAAC,eAAC,CAAC,AAClB,SAAS,CAAE,OAAO,EAAE,CAAC,AACtB,CAAC,AAOD,YAAY,8BAAC,CAAC,AACb,gBAAgB,CAAE,SAAS,AAC5B,CAAC,AAED,KAAK,8BAAC,CAAC,AACN,KAAK,CAAE,WAAW,CAClB,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,gBAAgB,8BAAC,CAAC,AACjB,SAAS,CAAE,IAAI,AAChB,CAAC,AAED,cAAc,8BAAC,CAAC,AACf,KAAK,CAAE,GAAG;CACX,CAAC;AC9SD,GAAG,eAAC,CAAC,AACJ,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,IAAI,CACtB,UAAU,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,CAC5B,UAAU,CAAE,KAAK,CACjB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GAAG,CACZ,QAAQ,CAAE,QAAQ,AACnB,CAAC"
}